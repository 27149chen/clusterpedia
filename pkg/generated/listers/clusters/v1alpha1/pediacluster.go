// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/clusterpedia-io/clusterpedia/pkg/apis/clusters/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PediaClusterLister helps list PediaClusters.
// All objects returned here must be treated as read-only.
type PediaClusterLister interface {
	// List lists all PediaClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PediaCluster, err error)
	// Get retrieves the PediaCluster from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PediaCluster, error)
	PediaClusterListerExpansion
}

// pediaClusterLister implements the PediaClusterLister interface.
type pediaClusterLister struct {
	indexer cache.Indexer
}

// NewPediaClusterLister returns a new PediaClusterLister.
func NewPediaClusterLister(indexer cache.Indexer) PediaClusterLister {
	return &pediaClusterLister{indexer: indexer}
}

// List lists all PediaClusters in the indexer.
func (s *pediaClusterLister) List(selector labels.Selector) (ret []*v1alpha1.PediaCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PediaCluster))
	})
	return ret, err
}

// Get retrieves the PediaCluster from the index for a given name.
func (s *pediaClusterLister) Get(name string) (*v1alpha1.PediaCluster, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pediacluster"), name)
	}
	return obj.(*v1alpha1.PediaCluster), nil
}
